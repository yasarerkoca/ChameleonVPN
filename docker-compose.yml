services:
  db:
    image: postgres:14
    environment:
      POSTGRES_DB: chameleonvpn
      POSTGRES_USER: vpnadmin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vpnadmin -d chameleonvpn"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env  # copy from backend/.env.example
    environment:
      DATABASE_URL: postgresql+psycopg2://vpnadmin:${POSTGRES_PASSWORD}@db:5432/chameleonvpn
      REDIS_URL: redis://redis:6379/0
      ALLOWED_ORIGINS: '["http://localhost","http://127.0.0.1"]'
      FIREBASE_PROJECT_ID: chameleonvpn-aba53
      GOOGLE_APPLICATION_CREDENTIALS: /app/secrets/serviceAccount.json
    volumes:
      - ./infra/secrets:/app/secrets:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://127.0.0.1:8000/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "8000:8000"
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

volumes:
  pgdata:
  redisdata:
