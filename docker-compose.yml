services:
  # --- PostgreSQL veritabanı ---
  db:
    image: postgres:14
    env_file:
      - ./backend/.env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "127.0.0.1:5432:5432"
    restart: unless-stopped
    networks:
      - chameleon_net

  # --- Redis ---
  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    networks:
      - chameleon_net

  # --- Alembic migrate ---
  migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile
    working_dir: /app
    entrypoint: ["alembic", "-c", "alembic.ini"]
    command: ["upgrade", "head"]
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - ./infra/secrets:/app/secrets:ro
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    networks:
      - chameleon_net

  # --- Backend (FastAPI) ---
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    working_dir: /app
    entrypoint: ["/entrypoint.sh"]
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - ./infra/secrets:/app/secrets:ro
      - /etc/wireguard:/etc/wireguard
    cap_add:
      - NET_ADMIN
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://127.0.0.1:8000/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "8000:8000"
    restart: unless-stopped
    networks:
      - chameleon_net

  # --- Web (Nginx reverse proxy + static hosting) ---
  web:
    image: nginx:alpine
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/web-admin/dist:/usr/share/nginx/html:ro
      - ./frontend/root:/usr/share/nginx/root:ro
      - ./deploy/nginx/chameleon.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - certbot-www:/var/www/certbot
    restart: unless-stopped
    networks:
      - chameleon_net

  # --- Certbot ---
  certbot:
    image: certbot/certbot:latest
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - certbot-www:/var/www/certbot
      - ./deploy/certbot/renew_hook.sh:/renew_hook.sh:ro
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: sh
    command: -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot --quiet --deploy-hook "/renew_hook.sh"; sleep 12h; done'
    restart: unless-stopped
    networks:
      - chameleon_net

# --- Volume tanımları ---
volumes:
  pgdata:
  redisdata:
  certbot-www:

# --- Network tanımı ---
networks:
  chameleon_net:
    driver: bridge
